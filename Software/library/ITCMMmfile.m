function [methodinfo,structs,enuminfo,ThunkLibName]=ITCMMmfile
%ITCMMMFILE Create structures to define interfaces found in 'ITC18'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Thu Aug 16 12:01:12 2012
%perl options:'ITC18.i -outfile=ITCMMmfile.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int ITC18_GetStatusText ( void * device , int status , char * text , int length ); 
fcns.name{fcnNum}='ITC18_GetStatusText'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int ITC18_GetStructureSize (); 
fcns.name{fcnNum}='ITC18_GetStructureSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int ITC18_GetVersion ( void * device , void * UserVersion , void * KernelVersion ); 
fcns.name{fcnNum}='ITC18_GetVersion'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_Open ( void * device , int device_number ); 
fcns.name{fcnNum}='ITC18_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_Close ( void * device ); 
fcns.name{fcnNum}='ITC18_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_Initialize ( void * device , int LCA_configuration ); 
fcns.name{fcnNum}='ITC18_Initialize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_InitializeCustom ( void * device , void * control_data , void * isolated_data ); 
fcns.name{fcnNum}='ITC18_InitializeCustom'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_GetFIFOSize ( void * device ); 
fcns.name{fcnNum}='ITC18_GetFIFOSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_ReadROM ( void * device , int address , int size , void * data ); 
fcns.name{fcnNum}='ITC18_ReadROM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_WriteROM ( void * device , int address , void * data ); 
fcns.name{fcnNum}='ITC18_WriteROM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_SetSamplingInterval ( void * device , int timer_ticks , int external_clock ); 
fcns.name{fcnNum}='ITC18_SetSamplingInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_WriteAuxiliaryDigitalOutput ( void * device , int data ); 
fcns.name{fcnNum}='ITC18_WriteAuxiliaryDigitalOutput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SetDigitalInputMode ( void * device , int latch , int invert ); 
fcns.name{fcnNum}='ITC18_SetDigitalInputMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SetReadyLight ( void * device , int on ); 
fcns.name{fcnNum}='ITC18_SetReadyLight'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SetSequence ( void * device , int length , int * instructions ); 
fcns.name{fcnNum}='ITC18_SetSequence'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_SetRange ( void * device , int * range ); 
fcns.name{fcnNum}='ITC18_SetRange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_SetExternalTriggerMode ( void * device , int transition , int invert ); 
fcns.name{fcnNum}='ITC18_SetExternalTriggerMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_InitializeAcquisition ( void * device ); 
fcns.name{fcnNum}='ITC18_InitializeAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_Start ( void * device , int external_trigger , int output_enable , int stoponoverflow , int reserved ); 
fcns.name{fcnNum}='ITC18_Start'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_GetFIFOWriteAvailable ( void * device , int * available ); 
fcns.name{fcnNum}='ITC18_GetFIFOWriteAvailable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_WriteFIFO ( void * device , int length , short * buffer ); 
fcns.name{fcnNum}='ITC18_WriteFIFO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetFIFOReadAvailableOverflow ( void * device , int * available , int * overflow ); 
fcns.name{fcnNum}='ITC18_GetFIFOReadAvailableOverflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetFIFOReadAvailable ( void * device , int * available ); 
fcns.name{fcnNum}='ITC18_GetFIFOReadAvailable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_ReadFIFO ( void * device , int length , short * buffer ); 
fcns.name{fcnNum}='ITC18_ReadFIFO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% int ITC18_IsClipping ( void * device , int * clipping ); 
fcns.name{fcnNum}='ITC18_IsClipping'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetFIFOOverflow ( void * device , int * overflow ); 
fcns.name{fcnNum}='ITC18_GetFIFOOverflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_Stop ( void * device ); 
fcns.name{fcnNum}='ITC18_Stop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_GetStatusOverflow ( void * device ); 
fcns.name{fcnNum}='ITC18_GetStatusOverflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_Release ( void * device ); 
fcns.name{fcnNum}='ITC18_Release'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_Reserve ( void * device , int * busy ); 
fcns.name{fcnNum}='ITC18_Reserve'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_SetBank ( void * device , unsigned bank ); 
fcns.name{fcnNum}='ITC18_SetBank'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int ITC18_SetDACShift ( void * device , unsigned shift ); 
fcns.name{fcnNum}='ITC18_SetDACShift'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% int ITC18_AllocateMemory ( void * device , int SizeInBytes , void ** LinAddress ); 
fcns.name{fcnNum}='ITC18_AllocateMemory'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtrPtr'};fcnNum=fcnNum+1;
% int ITC18_FreeMemory ( void * device ); 
fcns.name{fcnNum}='ITC18_FreeMemory'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_ReadPCIConfig ( void * device , void * pciconfig ); 
fcns.name{fcnNum}='ITC18_ReadPCIConfig'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_WritePCIConfig ( void * device , void * pciconfig ); 
fcns.name{fcnNum}='ITC18_WritePCIConfig'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int ITC18_ReadPCIROMSector ( void * device , int Address , unsigned char * PCIData ); 
fcns.name{fcnNum}='ITC18_ReadPCIROMSector'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% int ITC18_WritePCIROMSector ( void * device , int Address , unsigned char * PCIData ); 
fcns.name{fcnNum}='ITC18_WritePCIROMSector'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetPCISerialNumber ( void * device , int * SerialNumber ); 
fcns.name{fcnNum}='ITC18_GetPCISerialNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetDeviceInfo ( void * device , int * DeviceType , int * DeviceNumber ); 
fcns.name{fcnNum}='ITC18_GetDeviceInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetUSBInfo ( void * device , long * REVCTL , long * Speed , long * Version , long * SerialNumber ); 
fcns.name{fcnNum}='ITC18_GetUSBInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% int ITC18_SetUSBDigitalOutput ( void * device , int DigitalOutput ); 
fcns.name{fcnNum}='ITC18_SetUSBDigitalOutput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_GetUSBDigitalInput ( void * device , int * DigitalInput ); 
fcns.name{fcnNum}='ITC18_GetUSBDigitalInput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ITC18_SetUSBUserBit ( void * device , int Value ); 
fcns.name{fcnNum}='ITC18_SetUSBUserBit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int ITC18_GetTimer ( void * device , long long * Timer ); 
fcns.name{fcnNum}='ITC18_GetTimer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int64Ptr'};fcnNum=fcnNum+1;
% int ITC18_GetAcqTimer ( void * device , long long * StartTimer , long long * StopTimer ); 
fcns.name{fcnNum}='ITC18_GetAcqTimer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
% int ITC18_StartByTimer ( void * device , int external_trigger , int output_enable , int stoponoverflow , int reserved , long long Timer ); 
fcns.name{fcnNum}='ITC18_StartByTimer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32', 'int64'};fcnNum=fcnNum+1;
% int ITC18_ControlTimers ( void * device , long Control1 , long * Counter1 , long Control2 , long * Counter2 ); 
fcns.name{fcnNum}='ITC18_ControlTimers'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'long', 'longPtr', 'long', 'longPtr'};fcnNum=fcnNum+1;
% int ITC18_LoadUSB ( void * device , int datasize , char * data ); 
fcns.name{fcnNum}='ITC18_LoadUSB'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% unsigned long ITC18_GetDriverHandle ( void * device , void ** hDevice ); 
fcns.name{fcnNum}='ITC18_GetDriverHandle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% int ITC18_StopAndInitialize ( void * device , int stop , int initialize ); 
fcns.name{fcnNum}='ITC18_StopAndInitialize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SetupAcquisition ( void * device , int stop , int initialize , int length , int * instructions , int timer_ticks , int external_clock , int start , int external_trigger , int output_enable , int stoponoverflow , int reserved ); 
fcns.name{fcnNum}='ITC18_SetupAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32', 'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SmallRun ( void * device , int length , int * instructions , int timer_ticks , int external_clock , int OutputDataSize , short * OutputData , int InputDataSize , short * InputData , int external_trigger , int output_enable ); 
fcns.name{fcnNum}='ITC18_SmallRun'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'int16Ptr', 'int32', 'int16Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SingleWriteROM34 ( void * device , int Port , int Value ); 
fcns.name{fcnNum}='ITC18_SingleWriteROM34'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ITC18_SingleReadROM4 ( void * device , short * Value ); 
fcns.name{fcnNum}='ITC18_SingleReadROM4'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int16Ptr'};fcnNum=fcnNum+1;
methodinfo=fcns;