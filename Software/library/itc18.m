function [methodinfo,structs,enuminfo]=itc18
%ITC18 Create structures to define interfaces found in 'ITC18VB'.

%This function was generated by loadlibrary.m parser version 1.1.6.15 on Sun Oct  8 13:02:35 2006
%perl options:'ITC18VB.i -outfile=itc18.m'
ival={cell(1,18)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
% int VBITC18_GetStatusText ( void * device , int status , char * text , int length ); 
fcns.alias{fcnNum} = 'getStatusText'; fcns.name{fcnNum}='VBITC18_GetStatusText'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int VBITC18_GetStructureSize (); 
fcns.alias{fcnNum} = 'getStructureSize'; fcns.name{fcnNum}='VBITC18_GetStructureSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int VBITC18_Open ( void * device , int device_number ); 
fcns.alias{fcnNum} = 'open'; fcns.name{fcnNum}='VBITC18_Open'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% void VBITC18_Close ( void * device ); 
fcns.alias{fcnNum} = 'close'; fcns.name{fcnNum}='VBITC18_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int VBITC18_GetFIFOSize ( void * device ); 
fcns.alias{fcnNum} = 'getFifoSize'; fcns.name{fcnNum}='VBITC18_GetFIFOSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int VBITC18_SetSamplingInterval ( void * device , int timer_ticks , int external_clock ); 
fcns.alias{fcnNum} = 'setSamplingInterval'; fcns.name{fcnNum}='VBITC18_SetSamplingInterval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int VBITC18_SetSequence ( void * device , int length , int * instructions ); 
fcns.alias{fcnNum} = 'setSequence'; fcns.name{fcnNum}='VBITC18_SetSequence'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_SetRange ( void * device , int * range ); 
fcns.alias{fcnNum} = 'setRange'; fcns.name{fcnNum}='VBITC18_SetRange'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_InitializeAcquisition ( void * device ); 
fcns.alias{fcnNum} = 'initializeAcquisition'; fcns.name{fcnNum}='VBITC18_InitializeAcquisition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int VBITC18_Start ( void * device , int external_trigger , int output_enable ); 
fcns.alias{fcnNum} = 'start'; fcns.name{fcnNum}='VBITC18_Start'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int VBITC18_GetFIFOWriteAvailable ( void * device , int * available ); 
fcns.alias{fcnNum} = 'getFifoWriteAvailable'; fcns.name{fcnNum}='VBITC18_GetFIFOWriteAvailable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_WriteFIFO ( void * device , int length , short * buffer ); 
fcns.alias{fcnNum} = 'writeFifo'; fcns.name{fcnNum}='VBITC18_WriteFIFO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% int VBITC18_GetFIFOReadAvailable ( void * device , int * available ); 
fcns.alias{fcnNum} = 'getFifoReadAvailable'; fcns.name{fcnNum}='VBITC18_GetFIFOReadAvailable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_ReadFIFO ( void * device , int length , short * buffer ); 
fcns.alias{fcnNum} = 'readFifo'; fcns.name{fcnNum}='VBITC18_ReadFIFO'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% int VBITC18_IsClipping ( void * device , int * clipping ); 
fcns.alias{fcnNum} = 'isClipping'; fcns.name{fcnNum}='VBITC18_IsClipping'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_GetFIFOOverflow ( void * device , int * overflow ); 
fcns.alias{fcnNum} = 'getFifoOverflow'; fcns.name{fcnNum}='VBITC18_GetFIFOOverflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int VBITC18_Stop ( void * device ); 
fcns.alias{fcnNum} = 'stop'; fcns.name{fcnNum}='VBITC18_Stop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int VBITC18_GetStatusOverflow ( void * device ); 
fcns.alias{fcnNum} = 'getStatusOverflow'; fcns.name{fcnNum}='VBITC18_GetStatusOverflow'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};
methodinfo=fcns;
